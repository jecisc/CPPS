"
Description
--------------------

This command should not be used by hand in most cases. It is generated by the tools when we want to generate a new version of a model in a different image than the server. 

Parameters:
- sourceFilePath: 			The path to the sources to parse
- configurationPath: 		The path to the configuration file of the application
- technology: 			The class of the technology used
- avoidCrashes: 			This take a boolean and it is a hack in Ada. This should probably be improved. 
- dateTime: 				The date and time of the version creation as unix time (number of seconds since unix epoch, midnight Jan 1, 1970, UTC)

Example
-------------------

./pharo Java-Generator/Java-Generator.image generateVersion --sourceFilePath=""/Users/cyril/test/Java-OnWebFull/tmpSourceHolder/PixelController-master.zip"" --configurationPath=""/Users/cyril/test/Java-OnWebFull/inventiveToolkit.conf"" --technology=JAVATechnology --avoidCrashes=true --dateTime='1492089480'
"
Class {
	#name : #CPPSCreateVersionCommandLineHandler,
	#superclass : #CommandLineHandler,
	#instVars : [
		'serverPort'
	],
	#category : #'CPPS-Toolkit-Server-Commands'
}

{ #category : #accessing }
CPPSCreateVersionCommandLineHandler class >> commandName [

	^ 'generateVersion'
]

{ #category : #accessing }
CPPSCreateVersionCommandLineHandler class >> description [

	^ 'I create a new version for a Moose project from a source file and a configuration.'
]

{ #category : #'accessing - callback fields' }
CPPSCreateVersionCommandLineHandler class >> httpField_failureDescription [

	^ 'failureDescription'
]

{ #category : #'accessing - callback fields' }
CPPSCreateVersionCommandLineHandler class >> httpField_progressValue [

	^ 'progressValue'
]

{ #category : #'accessing - callback fields' }
CPPSCreateVersionCommandLineHandler class >> httpField_signalGenerationEnd [

	^ 'signalGenerationEnd'
]

{ #category : #'accessing - callback fields' }
CPPSCreateVersionCommandLineHandler class >> httpField_stackDump [

	^ 'stackDump'
]

{ #category : #testing }
CPPSCreateVersionCommandLineHandler class >> requireDeploymentPassword [

	^ false
]

{ #category : #activation }
CPPSCreateVersionCommandLineHandler >> activate [

	| project technology projectConfiguration |

	[ projectConfiguration := self getProjectConfiguration.
	self serverPort: projectConfiguration serverPort.
	project := self getProjectFrom: projectConfiguration.
	technology := projectConfiguration obtainsTechnology.
	self
		createVersionFor: project
		technology: technology.
	self notifySuccessOnPort: self serverPort
	]
		on: Error
		do:
			[ :ex | 
			ex dumpStackFor: thisContext.
			self
				notifyFailure: ex
				onPort: self serverPort
			].
	Smalltalk
		snapshot: false
		andQuit: true
]

{ #category : #activation }
CPPSCreateVersionCommandLineHandler >> createVersionFor: project technology: technology [

	| creator |

	project generationInProgress: false.
	self flag: #todo. "Extract Version creator part creating the version to another object."
	creator := CPPSVersionCreator new.
	creator
		project: project;
		technology: technology.
	self createVersionWith: creator
]

{ #category : #activation }
CPPSCreateVersionCommandLineHandler >> createVersionWith: versionCreator [

	[ versionCreator
		generateVersionFrom: (self optionAt: 'sourceFilePath') asFileReference
		dated: (DateAndTime fromUnixTime: (self optionAt: 'dateTime') asInteger)
		named: (self
				 optionAt: 'versionName'
				 ifAbsent: [ nil ])
	]
		on: Error
		do:
			[ :ex | "An exception has been raised during the generation.
		We save a version of the image in order to be able to debug.
		Then we let the exception go"
			SmalltalkImage current backupImageInFileNamed: SmalltalkImage current shortImageName asFileReference basenameWithoutExtension , '_debug_' , DateAndTime now printString , '.image'.
			ex pass
			]
]

{ #category : #activation }
CPPSCreateVersionCommandLineHandler >> ensureCurrentTechnologyIn: projectConfiguration [

	| technology |

	technology := self optionAt: 'technology'.
	projectConfiguration technologies do: [ :aTechnology | aTechnology className = technology ifTrue: [ projectConfiguration currentTechnology: aTechnology ] ]
]

{ #category : #activation }
CPPSCreateVersionCommandLineHandler >> getProjectConfiguration [

	^ (FileSystem workingDirectory resolve: (self optionAt: 'configurationPath'))
		  ifExists:
			  [ :configurationFile | 
			  | projectConfiguration |

			  projectConfiguration := CPPSProjectConfiguration readStonFrom: configurationFile.
			  self ensureCurrentTechnologyIn: projectConfiguration.
			  projectConfiguration
			  ]
		  ifAbsent: [ :file | self error: file pathString , ' does not exist.' ]
]

{ #category : #activation }
CPPSCreateVersionCommandLineHandler >> getProjectFrom: projectConfiguration [

	| project sourcePath |

	project := projectConfiguration obtainsProject.
	project mooseModelGenerator: projectConfiguration currentTechnology modelGenerator.
	sourcePath := self
		              optionAt: 'sourceDirectoryPath'
		              ifAbsent: [ nil ].
	project sourceHolder ifNil:
		[ "Usually, the Moose project object is instantiated and serialized from the GUI image, 
		then materialized within the generator image.
		During this process, the project sourceHolder variable is always initializedinitialized (from the the GUI image).
		But, if we start the generator image directly from a command line, it happens that the sourceHolder remains nil.
		Whereas the information may be available from the command line arguments.
		Here we make sure that the project sourceHolder is initialized.
		" 
		sourcePath ifNotNil: [ :aPathString | project sourceHolder: (MooseSourceHolderDirectory on: aPathString) ] ].
	('Got project for version creation. Source holder is: ' , project sourceHolder printString) record.
	^ project
]

{ #category : #notifying }
CPPSCreateVersionCommandLineHandler >> notifyFailure: exception onPort: portNumber [

	| dump |

	dump := exception dumpStackFor: thisContext.
	ZnClient new
		timeout: 36000;
		get:
			'http://localhost:' , portNumber asString , '/projectGeneration?' , self class httpField_signalGenerationEnd , '=failure&' , self class httpField_failureDescription , '=' , exception description urlEncoded , '&' , self class httpField_stackDump , '='
			, dump asAbsolute pathString urlEncoded
]

{ #category : #notifying }
CPPSCreateVersionCommandLineHandler >> notifySuccessOnPort: aPortNumber [

	^ ZnClient new
		  timeout: 36000;
		  get: 'http://localhost:' , aPortNumber asString , '/projectGeneration?' , self class httpField_signalGenerationEnd , '=success'
]

{ #category : #private }
CPPSCreateVersionCommandLineHandler >> serverPort [

	^ serverPort
]

{ #category : #private }
CPPSCreateVersionCommandLineHandler >> serverPort: aPortNumber [

	serverPort := aPortNumber
]
